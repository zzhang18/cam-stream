[{"E:\\Code\\SGB\\cam-stream\\src\\App.js":"1","E:\\Code\\SGB\\cam-stream\\src\\pages\\CamView.js":"2","E:\\Code\\SGB\\cam-stream\\src\\reportWebVitals.js":"3","E:\\Code\\SGB\\cam-stream\\src\\index.js":"4"},{"size":622,"mtime":1606802797627,"results":"5","hashOfConfig":"6"},{"size":5740,"mtime":1606812725047,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1606464551542,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1606464551542,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"eqoqeb",{"filePath":"12","messages":"13","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Code\\SGB\\cam-stream\\src\\App.js",["19"],"E:\\Code\\SGB\\cam-stream\\src\\pages\\CamView.js",["20","21","22","23","24","25","26","27","28"],"import React, { Component } from 'react';\r\nimport { Table, Button, Modal, Divider, Popconfirm, Form, Input, message, Result, Popover } from 'antd';\r\nimport _ from 'lodash';\r\n// import { useTranslation, withTranslation } from 'react-i18next';\r\nimport axios from 'axios';\r\nimport ReactJson from 'react-json-view'\r\n\r\nconst { Search } = Input;\r\nfunction CamView(props) {\r\n  \r\n  return (\r\n    <div style={{ padding: 40 }}>\r\n      <div style={{ marginBottom: 20 }}>\r\n        <div >\r\n          <h1 >Cam View</h1>\r\n        </div>\r\n        <div style={{ float: 'left' }}>\r\n          {/* <Button type=\"primary\" style={{ margin: '0 10px 10px 0' }} onClick={() => props.show()}>{t('addUser')}</Button>\r\n          <Search\r\n            placeholder='search user'\r\n            onSearch={(value) => props.search(value)}\r\n            style={{ width: 240 }}\r\n          />\r\n        </div>\r\n        <div style={{ float: 'right' }}>\r\n          <Button style={{ margin: '0 10px 10px 0' }} onClick={async () => {\r\n            i18n.changeLanguage(t('targetLangCode'));\r\n            // props.changeLocale();\r\n          }}>{t('targetLang')}</Button> */}\r\n          <Button onClick={props.getChannelsInfo}>Get channels info</Button>\r\n          <Button><a href='https://github.com/zzhang18/cam-stream'>GitHub</a></Button>\r\n        </div>\r\n        \r\n      </div>\r\n\r\n\r\n\r\n\r\n      {/* <h2>Server info</h2>  \r\n      {props.serverInfo.length >0 ?\r\n        <div>\r\n\r\n        <h3>Server: {props.serverInfo.LiveQing.Body.Server} </h3>\r\n        <h3>Running time: {props.serverInfo.LiveQing.Body.RunningTime} </h3>\r\n        <h3>Hardware: {props.serverInfo.LiveQing.Body.Hardware}</h3>\r\n        <h3>InterfaceVersion: {props.serverInfo.LiveQing.Body.InterfaceVersion}</h3>\r\n      \r\n        </div>\r\n        :\r\n        <div></div>\r\n      } */}\r\n        \r\n        {/* <ReactJson src={props.serverInfo} /> */}\r\n        {/* <h2 sytle={{float:'left'}}>Channel info</h2>   */}\r\n        {/* <ReactJson src={props.channels} /> */}\r\n      <Table\r\n        dataSource={props.channels}\r\n        columns={[\r\n          { title: 'Channel', dataIndex: 'Channel', key: 'Channel', width: 200, sorter: (a, b) => a.name > b.name },\r\n          { title: 'Name', dataIndex: 'Name', key: 'Name', width: 160, sorter: (a, b) => a.mobile - b.mobile },\r\n          { title: 'DeviceType', dataIndex: 'DeviceType', key: 'DeviceType', width: 160 },\r\n          { title: 'SourceVideoCodecName', dataIndex: 'SourceVideoCodecName', key: 'SourceVideoCodecName', width: 160 },\r\n          { title: 'SourceVideoFrameRate', dataIndex: 'SourceVideoFrameRate', key: 'SourceVideoFrameRate', width: 160 },\r\n          { title: 'SourceVideoWidth', dataIndex: 'SourceVideoWidth', key: 'SourceVideoWidth', width: 160 },\r\n          { title: 'SourceVideoHeight', dataIndex: 'SourceVideoHeight', key: 'SourceVideoHeight', width: 160 },\r\n          { title: 'Snapshot', dataIndex: 'SnapURL', key: 'SnapURL', width: 160,\r\n            render: (record) =><img src={'http://localhost:10800'+record} width=\"80px\" height=\"80px\" ></img>\r\n          }\r\n        ]}\r\n      />\r\n      \r\n      <h3 style={{ float: 'right' }}>v.0.0.1</h3>\r\n    </div>\r\n  );\r\n}\r\nlet hoc = (WrappedComponent) => {\r\n  return class EnhancedComponent extends Component {\r\n    get t() { return this.props.t; }\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        user: null,\r\n        users: null,\r\n        visible: false,\r\n        title: 'Add user',\r\n        serverInfo: [],\r\n        channels:[]\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      // await this.fetchUsers();\r\n      await this.getServerInfo()\r\n      await this.getChannelsInfo()\r\n    }\r\n\r\n    async getServerInfo(){\r\n      let result = await axios.get('http://localhost:10800/api/v1/getserverinfo');\r\n      // console.log('type',typeof(serverInfo));\r\n      // console.log('result',serverInfo);\r\n      this.setState({serverInfo:result.data});\r\n    }\r\n\r\n    async getChannelsInfo(){\r\n      let result = await axios.get('http://localhost:10800/api/v1/getchannels');\r\n      // console.log('type',typeof(serverInfo));\r\n      // console.log('result',serverInfo);\r\n      this.setState({channels:result.data.LiveQing.Body.Channels});\r\n    }\r\n\r\n    async fetchUsers() {\r\n      let users = _.times(10, index => {\r\n        return {\r\n          \"name\": 'user' + index,\r\n          \"mobile\": 'mobile' + index,\r\n          \"email\": 'email' + index\r\n        };\r\n      }\r\n      );\r\n      this.setState({ users });\r\n    }\r\n\r\n    async search(value) {\r\n      let users = _.times(10, index => {\r\n        return {\r\n          \"name\": 'user' + index,\r\n          \"mobile\": 'mobile' + index,\r\n          \"email\": 'email' + index\r\n        };\r\n      }\r\n      );\r\n      this.setState({ users: value ? _.filter(users, { 'name': value }) : users });\r\n    }\r\n\r\n    async show(user) {\r\n      this.setState({ visible: true, user, title: user ? this.t('editUser') : this.t('addUser') });\r\n    }\r\n\r\n    async edit(user) {\r\n      this.cancel();\r\n    }\r\n\r\n    async cancel() {\r\n      this.setState({ visible: false, user: null });\r\n    }\r\n\r\n    async delete(user) {\r\n      message.success('deleted');\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent\r\n        user={this.state.user}\r\n        users={this.state.users}\r\n        title={this.state.title}\r\n        visible={this.state.visible}\r\n        serverInfo={this.state.serverInfo}\r\n        channels={this.state.channels}\r\n        cancel={() => this.cancel()}\r\n        show={(user) => this.show(user)}\r\n        edit={(user) => this.edit(user)}\r\n        search={(value) => this.search(value)}\r\n        getServerInfo={()=>this.getServerInfo()}\r\n        getChannelsInfo={()=>this.getChannelsInfo()}\r\n\r\n      />;\r\n    }\r\n  };\r\n};\r\n\r\nexport default hoc(CamView);\r\n","E:\\Code\\SGB\\cam-stream\\src\\reportWebVitals.js",[],"E:\\Code\\SGB\\cam-stream\\src\\index.js",[],{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":2,"column":25,"nodeType":"31","messageId":"32","endLine":2,"endColumn":30},{"ruleId":"29","severity":1,"message":"34","line":2,"column":32,"nodeType":"31","messageId":"32","endLine":2,"endColumn":39},{"ruleId":"29","severity":1,"message":"35","line":2,"column":41,"nodeType":"31","messageId":"32","endLine":2,"endColumn":51},{"ruleId":"29","severity":1,"message":"36","line":2,"column":53,"nodeType":"31","messageId":"32","endLine":2,"endColumn":57},{"ruleId":"29","severity":1,"message":"37","line":2,"column":75,"nodeType":"31","messageId":"32","endLine":2,"endColumn":81},{"ruleId":"29","severity":1,"message":"38","line":2,"column":83,"nodeType":"31","messageId":"32","endLine":2,"endColumn":90},{"ruleId":"29","severity":1,"message":"39","line":6,"column":8,"nodeType":"31","messageId":"32","endLine":6,"endColumn":17},{"ruleId":"29","severity":1,"message":"40","line":8,"column":9,"nodeType":"31","messageId":"32","endLine":8,"endColumn":15},{"ruleId":"41","severity":1,"message":"42","line":67,"column":32,"nodeType":"43","endLine":67,"endColumn":103},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Divider' is defined but never used.","'Popconfirm' is defined but never used.","'Form' is defined but never used.","'Result' is defined but never used.","'Popover' is defined but never used.","'ReactJson' is defined but never used.","'Search' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]